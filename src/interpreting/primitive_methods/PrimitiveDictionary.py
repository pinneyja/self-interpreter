from interpreting.primitive_methods.SmallIntPrimitives import *
from interpreting.primitive_methods.FloatPrimitives import *
from interpreting.primitive_methods.ObjectPrimitives import *
from interpreting.primitive_methods.ObjectVectorPrimitives import *
from interpreting.primitive_methods.StringPrimitives import *

primitive_dict = {
	'_IntNE:' : handleIntIfFail(handleIntNE, '_IntNE:'),
	'_IntNE:IfFail:' : handleIntIfFail(handleIntNE, '_IntNE:IfFail:'),
	'_IntMod:' : handleIntIfFail(handleIntMod, '_IntMod:'),
	'_IntMod:IfFail:' : handleIntIfFail(handleIntMod, '_IntMod:IfFail:'),
	'_IntMul:' : handleIntIfFail(handleIntMul, '_IntMul:'),
	'_IntMul:IfFail:' : handleIntIfFail(handleIntMul, '_IntMul:IfFail:'),
	'_IntAdd:' : handleIntIfFail(handleIntAdd, '_IntAdd:'),
	'_IntAdd:IfFail:' : handleIntIfFail(handleIntAdd, '_IntAdd:IfFail:'),
	'_IntSub:' : handleIntIfFail(handleIntSub, '_IntSub:'),
	'_IntSub:IfFail:' : handleIntIfFail(handleIntSub, '_IntSub:IfFail:'),
	'_IntDiv:' : handleIntIfFail(handleIntDiv, '_IntDiv:'),
	'_IntDiv:IfFail:' : handleIntIfFail(handleIntDiv, '_IntDiv:IfFail:'),
	'_IntLT:' : handleIntIfFail(handleIntLT, '_IntLT:'),
	'_IntLT:IfFail:' : handleIntIfFail(handleIntLT, '_IntLT:IfFail:'),
	'_IntLE:' : handleIntIfFail(handleIntLE, '_IntLE:'),
	'_IntLE:IfFail:' : handleIntIfFail(handleIntLE, '_IntLE:IfFail:'),
	'_IntEQ:' : handleIntIfFail(handleIntEQ, '_IntEQ:'),
	'_IntEQ:IfFail:' : handleIntIfFail(handleIntEQ, '_IntEQ:IfFail:'),
	'_IntGT:' : handleIntIfFail(handleIntGT, '_IntGT:'),
	'_IntGT:IfFail:' : handleIntIfFail(handleIntGT, '_IntGT:IfFail:'),
	'_IntGE:' : handleIntIfFail(handleIntGE, '_IntGE:'),
	'_IntGE:IfFail:' : handleIntIfFail(handleIntGE, '_IntGE:IfFail:'),
	'_IntArithmeticShiftLeft:' : handleIntIfFail(handleIntArithmeticShiftLeft, '_IntArithmeticShiftLeft:'),
	'_IntArithmeticShiftRight:' : handleIntIfFail(handleIntArithmeticShiftRight, '_IntArithmeticShiftRight:'),
	'_IntLogicalShiftLeft:' : handleIntIfFail(handleIntLogicalShiftLeft, '_IntLogicalShiftLeft:'),
	'_IntLogicalShiftRight:' : handleIntIfFail(handleIntLogicalShiftRight, '_IntLogicalShiftRight:'),
	'_IntOr:' : handleIntIfFail(handleIntOr, '_IntOr:'),
	'_IntAnd:' : handleIntIfFail(handleIntAnd, '_IntAnd:'),
	'_IntXor:' : handleIntIfFail(handleIntXor, '_IntXor:'),
	'_IntAsFloat' : handleIntAsFloat,
	'_FloatMul:' : handleFloatIfFail(handleFloatMul, '_FloatMul:'),
	'_FloatMul:IfFail:' : handleFloatIfFail(handleFloatMul, '_FloatMul:IfFail:'),
	'_FloatAdd:' : handleFloatIfFail(handleFloatAdd, '_FloatAdd:'),
	'_FloatAdd:IfFail:' : handleFloatIfFail(handleFloatAdd, '_FloatAdd:IfFail:'),
	'_FloatSub:' : handleFloatIfFail(handleFloatSub, '_FloatSub:'),
	'_FloatSub:IfFail:' : handleFloatIfFail(handleFloatSub, '_FloatSub:IfFail:'),
	'_FloatDiv:' : handleFloatIfFail(handleFloatDiv, '_FloatDiv:'),
	'_FloatDiv:IfFail:' : handleFloatIfFail(handleFloatDiv, '_FloatDiv:IfFail:'),
	'_FloatMod:' : handleFloatIfFail(handleFloatMod, '_FloatMod:'),
	'_FloatMod:IfFail:' : handleFloatIfFail(handleFloatMod, '_FloatMod:IfFail:'),
	'_FloatNE:' : handleFloatIfFail(handleFloatNE, '_FloatNE:'),
	'_FloatNE:IfFail:' : handleFloatIfFail(handleFloatNE, '_FloatNE:IfFail:'),
	'_FloatLT:' : handleFloatIfFail(handleFloatLT, '_FloatLT:'),
	'_FloatLT:IfFail:' : handleFloatIfFail(handleFloatLT, '_FloatLT:IfFail:'),
	'_FloatLE:' : handleFloatIfFail(handleFloatLE, '_FloatLE:'),
	'_FloatLE:IfFail:' : handleFloatIfFail(handleFloatLE, '_FloatLE:IfFail:'),
	'_FloatEQ:' : handleFloatIfFail(handleFloatEQ, '_FloatEQ:'),
	'_FloatEQ:IfFail:' : handleFloatIfFail(handleFloatEQ, '_FloatEQ:IfFail:'),
	'_FloatGT:' : handleFloatIfFail(handleFloatGT, '_FloatGT:'),
	'_FloatGT:IfFail:' : handleFloatIfFail(handleFloatGT, '_FloatGT:IfFail:'),
	'_FloatGE:' : handleFloatIfFail(handleFloatGE, '_FloatGE:'),
	'_FloatGE:IfFail:' : handleFloatIfFail(handleFloatGE, '_FloatGE:IfFail:'),
	'_FloatCeil' : handleFloatCeil,
	'_FloatCeilIfFail:' : handleNoArgFloatIfFail(handleFloatCeil, '_FloatCeil'),
	'_FloatFloor' : handleFloatFloor,
	'_FloatFloorIfFail:' : handleNoArgFloatIfFail(handleFloatFloor, '_FloatFloor'),
	'_FloatRound' : handleFloatRound,
	'_FloatRoundIfFail:' : handleNoArgFloatIfFail(handleFloatRound, '_FloatRound'),
	'_FloatTruncate' : handleFloatTruncate,
	'_FloatTruncateIfFail:' : handleNoArgFloatIfFail(handleFloatTruncate, '_FloatTruncate'),
	'_FloatAsInt' : handleFloatAsInt,
	'_FloatAsIntIfFail:' : handleNoArgFloatIfFail(handleFloatAsInt, '_FloatAsInt'),
	'_AddSlots:' : handleAddSlots,
	'_Assignment:Value:' : handleAssignment,
	'_RunScript' : handleRunScript,
	'_RunScriptIfFail:' : handleRunScriptIfFail,
	'_Eq:' : handleEq,
	'_IdentityHash' : handleIdentityHash,
	'_IsStringIfFalse:' : handleIsString,
	'_Clone' : handleClone,
	'_CloneIfFail:' : handleClone,
	'_Define:' : handleDefine,
	'_GetSlot:' : handleGetSlot,
	'_CurrentTimeString' : handleCurrentTimeString,
	'_Clone:Filler:' : handleCloneFiller,
	'_Clone:Filler:IfFail:' : handleCloneFiller,
	'_At:' : handleAt,
	'_At:IfFail:' : handleAt,
	'_At:Put:' : handleAtPut,
	'_At:Put:IfFail:' : handleAtPut,
	'_Size' : handleSize,
	'_CopyRangeDstPos:Src:SrcPos:Length:' : handleCopyRangeDstPosSrcSrcPosLength,
	'_CopyRangeDstPos:Src:SrcPos:Length:IfFail:' : handleCopyRangeDstPosSrcSrcPosLength,
	'_StringCanonicalize' : handleStringCanonicalize,
	'_StringPrint' : handleStringPrint,
	'_ByteSize' : handleByteSize,
	'_ByteAt:' : handleByteAt,
	'_ByteAt:IfFail:' : handleByteAtIfFail,
	'_ByteAt:Put:' : handleByteAtPut,
	'_ByteAt:Put:IfFail:' : handleByteAtPutIfFail,
	'_CloneBytes:Filler:' : handleCloneBytesFiller,
	'_CloneBytes:Filler:IfFail:' : handleCloneBytesFillerIfFail,
	'_ByteVectorConcatenate:Prototype:' : handleByteVectorConcatenatePrototype,
	'_ByteVectorConcatenate:Prototype:IfFail:' : handleByteVectorConcatenatePrototypeIfFail,
	'_ByteVectorCompare:' : handleByteVectorCompare,
	'_ByteVectorCompare:IfFail:' : handleByteVectorCompareIfFail,
	'_CopyByteRangeDstPos:Src:SrcPos:Length:' : handleCopyRangeDstPosSrcSrcPosLength,
	'_CopyByteRangeDstPos:Src:SrcPos:Length:IfFail:' : handleCopyRangeDstPosSrcSrcPosLength,
	'_ThrowError:' : handleThrowError,
	'_Print' : handlePrint
}